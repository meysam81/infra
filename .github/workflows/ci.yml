name: ci

concurrency:
  cancel-in-progress: ${{ ! startsWith(github.ref, 'refs/tags/v') }}
  group: ci-${{ github.ref_name }}-${{ github.event_name }}

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
  schedule:
    - cron: "0 */12 * * *"
    - cron: "0 14 * * *" # 10:00 eastern time
    - cron: "0 17 * * *" # 10:00 pacific time
  workflow_dispatch:

env:
  tofu_version: 1.8.5
  tg_version: 0.69.0
  TF_PLUGIN_CACHE_DIR: ${{ github.workspace }}/.terraform.d/plugin-cache
  PYTHON_VERSION: 3.x

permissions:
  id-token: write
  contents: write
  pull-requests: write

jobs:
  lint:
    if: contains(fromJson('["push","pull_request"]'), github.event_name)
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout"
        uses: actions/checkout@v4
      - name: Check terragrunt HCL
        uses: gruntwork-io/terragrunt-action@v2
        with:
          tofu_version: ${{ env.tofu_version }}
          tg_version: ${{ env.tg_version }}
          tg_dir: ${{ env.working_dir }}
          tg_command: "hclfmt --terragrunt-check --terragrunt-diff"

  opentofu:
    if: |
      (
        github.event_name == 'schedule' &&
        github.event.schedule == '0 */12 * * *'
      ) ||
      github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    env:
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      HCLOUD_TOKEN: ${{ secrets.HCLOUD_TOKEN }}
      CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
      TF_VAR_cloudflare_api_token: ${{ secrets.CLOUDFLARE_API_TOKEN }}
      TF_TOKEN_app_terraform_io: ${{ secrets.TF_TOKEN_app_terraform_io }}
    environment: prod
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Create Terraform Plugin Cache Dir
        run: mkdir -p $TF_PLUGIN_CACHE_DIR
      - name: Terraform Plugin Cache
        uses: actions/cache@v4
        with:
          path: ${{ env.TF_PLUGIN_CACHE_DIR }}
          key: ${{ runner.os }}-terraform-plugin-cache-${{ hashFiles('**/.terraform.lock.hcl') }}
          restore-keys: |
            ${{ runner.os }}-terraform-plugin-cache-
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_IAM_ROLE }}
          role-session-name: ci-${{ github.ref_name }}-${{ github.run_id }}
          aws-region: ${{ vars.AWS_REGION }}
      - name: Deploy
        uses: gruntwork-io/terragrunt-action@v2
        with:
          tofu_version: ${{ env.tofu_version }}
          tg_version: ${{ env.tg_version }}
          tg_dir: ./live
          tg_command: >-
            run-all
              --terragrunt-strict-include
              --terragrunt-include-dir cloudflare
              --terragrunt-include-dir newsletter-server
              --terragrunt-include-dir k8s-oidc-provider
              --terragrunt-non-interactive
              apply -auto-approve

  ansible-playbook:
    if: |
      (
        github.event_name == 'schedule' &&
        github.event.schedule == '0 */12 * * *'
      ) ||
      github.event_name == 'workflow_dispatch'
    runs-on: self-hosted
    env:
      HCLOUD_TOKEN: ${{ secrets.HCLOUD_TOKEN }}
      CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
      TF_TOKEN_app_terraform_io: ${{ secrets.TF_TOKEN_app_terraform_io }}
      ANSIBLE_FORCE_COLOR: "1"
      PY_COLORS: "1"
    environment: prod
    defaults:
      run:
        working-directory: ./ansible
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - id: python
        name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install requirements
        run: |
          pip install -U pip -r requirements.txt
          ansible-galaxy install -r requirements.yml
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_IAM_ROLE }}
          role-session-name: ci-${{ github.ref_name }}-${{ github.run_id }}
          aws-region: ${{ vars.AWS_REGION }}
      - name: Run Ansible playbook
        run: |
          ansible-playbook newsletter-server/main.yml

  kubescape:
    if: contains(fromJson('["push","pull_request","schedule"]'), github.event_name)
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - uses: kubescape/github-action@main
        continue-on-error: true
        with:
          format: sarif
          outputFile: results
      - name: Upload Kubescape scan results to Github Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: results.sarif

  submit-hackernews:
    if: github.event_name == 'schedule' && github.event.schedule == '0 14 * * *'
    runs-on: ubuntu-latest
    permissions:
      contents: read
    env:
      HACKERNEWS_DSN: ${{ secrets.HACKERNEWS_DSN }}
    defaults:
      run:
        working-directory: ./applications/hn-submission
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install poetry
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install dependencies
        run: |
          pip install 'poetry<2'
          poetry install
      - id: db
        name: Fetch Hacker News submissions
        run: poetry run ./main.py
      - if: fromJson(steps.db.outputs.found)
        name: Show submission information
        run: |
          echo "${{ steps.db.outputs.id }}: ${{ steps.db.outputs.title }} ${{ steps.db.outputs.url }}"
      - if: fromJson(steps.db.outputs.found)
        name: Submit link to Hacker News
        uses: meysam81/submit-hackernews@main
        with:
          username: ${{ secrets.HACKERNEWS_USERNAME }}
          password: ${{ secrets.HACKERNEWS_PASSWORD }}
          title: ${{ steps.db.outputs.title }}
          url: ${{ steps.db.outputs.url }}
          verbose: true
      - if: fromJson(steps.db.outputs.found)
        name: Mark story as submitted
        run: poetry run ./main.py --submit --id "${{ steps.db.outputs.id }}"

  reddit-scheduled-submit:
    if: github.event_name == 'schedule' && github.event.schedule == '0 17 * * *'
    runs-on: ubuntu-latest
    permissions:
      contents: read
    env:
      REDDIT_DSN: ${{ secrets.REDDIT_DSN }}
    defaults:
      run:
        working-directory: ./applications/reddit-submission
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install poetry
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install dependencies
        run: |
          pip install 'poetry<2'
          poetry install
      - id: db
        name: Fetch submissions
        run: poetry run ./main.py
      - if: fromJson(steps.db.outputs.found)
        name: Show submission information
        run: |
          echo -e "${{ steps.db.outputs.id }}: ${{ steps.db.outputs.title }}\n\n${{ steps.db.outputs.description }}"
      - if: fromJson(steps.db.outputs.found)
        name: Post to Reddit
        uses: meysam81/reddit-scheduled-submit@main
        with:
          client-id: ${{ secrets.REDDIT_CLIENT_ID }}
          client-secret: ${{ secrets.REDDIT_CLIENT_SECRET }}
          username: ${{ secrets.REDDIT_USERNAME }}
          password: ${{ secrets.REDDIT_PASSWORD }}
          subreddit: ${{ steps.db.outputs.subreddit }}
          message: ${{ steps.db.outputs.description }}
          title: ${{ steps.db.outputs.title }}
      - if: fromJson(steps.db.outputs.found)
        name: Mark story as submitted
        run: poetry run ./main.py --submit --id "${{ steps.db.outputs.id }}"

  prepare:
    if: |
      ( github.event_name == 'push' && github.ref == 'refs/heads/main' ) ||
      github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      matrix: ${{ steps.matrix.outputs.matrix }}
      length: ${{ steps.matrix.outputs.length }}
    steps:
      - uses: actions/checkout@v4
        name: Checkout
      - id: matrix
        name: Discover changed services
        uses: developer-friendly/selective-builds-actions@v1
        with:
          path: applications
          redis-host: ${{ secrets.REDIS_HOST }}
          redis-port: ${{ secrets.REDIS_PORT }}
          redis-password: ${{ secrets.REDIS_PASSWORD }}
          redis-ssl: true
          store-key: infra-services
          exclusions: |
            hn-submission
            reddit-submission

  build:
    needs: prepare
    runs-on: ubuntu-latest
    if: needs.prepare.outputs.length > 0
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.prepare.outputs.matrix) }}
    permissions:
      contents: read
      packages: write
      security-events: write
    steps:
      - name: Pre-process image name
        id: image-name
        run: |
          name=$(echo ${{ matrix.directory }} | sed 's/.*\///')
          echo "name=$name" >> $GITHUB_OUTPUT
      - name: Build docker
        uses: meysam81/build-docker@v1
        with:
          context: ${{ matrix.directory }}
          image-name: ghcr.io/${{ github.repository }}/${{ steps.image-name.outputs.name }}
          image-extra-tags: |
            ghcr.io/${{ github.repository }}/${{ steps.image-name.outputs.name }}:${{ github.run_id }}
          kubescape: true
          kubescape-upload-sarif: true

  finalize:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4
        name: Checkout
      - id: matrix
        name: Discover changed services
        uses: developer-friendly/selective-builds-actions@v1
        with:
          path: applications
          redis-host: ${{ secrets.REDIS_HOST }}
          redis-port: ${{ secrets.REDIS_PORT }}
          redis-password: ${{ secrets.REDIS_PASSWORD }}
          redis-ssl: ${{ secrets.REDIS_SSL }}
          store-key: infra-services
          mode: submit
          exclusions: |
            hn-submission
            reddit-submission

  labeler:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.event_name == 'schedule'
    permissions:
      contents: read
      pull-requests: write
      issues: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: PR Labeler
        uses: srvaroa/labeler@master
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
        with:
          config_path: .github/labeler.yml
          use_local_config: false
          fail_on_error: false
