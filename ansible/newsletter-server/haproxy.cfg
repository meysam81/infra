global
  log stdout format raw local0 info
  log-send-hostname
  chroot /var/lib/haproxy
  stats socket /run/haproxy/admin.sock mode 660 level admin expose-fd listeners
  stats timeout 30s
  user haproxy
  group haproxy

  maxconn 10000

  # Default SSL material locations
  ca-base /etc/ssl/certs
  crt-base /etc/ssl/private

  # See: https://ssl-config.mozilla.org/#server=haproxy&server-version=2.0.3&config=intermediate
  ssl-default-bind-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384
  ssl-default-bind-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256
  ssl-default-bind-options ssl-min-ver TLSv1.2 no-tls-tickets
  tune.ssl.default-dh-param 2048

defaults
  backlog 1000

  log     global
  mode    http
  option  httplog
  option  dontlognull
  timeout connect 5000
  timeout client  50000
  timeout server  50000
  errorfile 400 /etc/haproxy/errors/400.http
  errorfile 403 /etc/haproxy/errors/403.http
  errorfile 404 /etc/haproxy/errors/404.http
  errorfile 408 /etc/haproxy/errors/408.http
  errorfile 429 /etc/haproxy/errors/429.http
  errorfile 500 /etc/haproxy/errors/500.http
  errorfile 502 /etc/haproxy/errors/502.http
  errorfile 503 /etc/haproxy/errors/503.http
  errorfile 504 /etc/haproxy/errors/504.http

cache hacache
  total-max-size 10
  max-object-size 10000
  max-age 60

frontend stats
  bind 127.0.0.1:8404
  http-request use-service prometheus-exporter if { path /metrics }
  stats enable
  stats uri /stats
  stats refresh 10s

frontend http
  bind :80

  acl my_block_cf_ip hdr_ip(cf-connecting-ip) -f /etc/haproxy/blocked_subnets.lst
  acl my_block_xff_ip hdr_ip(x-forwarded-for) -f /etc/haproxy/blocked_subnets.lst
  acl my_block_direct_ip src -f /etc/haproxy/blocked_subnets.lst
  http-request silent-drop if my_block_cf_ip or my_block_xff_ip or my_block_direct_ip

  acl block_cf_ip hdr_ip(cf-connecting-ip) -f /etc/haproxy/bad_reputation_ips.lst
  acl block_xff_ip hdr_ip(x-forwarded-for) -f /etc/haproxy/bad_reputation_ips.lst
  acl block_direct_ip src -f /etc/haproxy/bad_reputation_ips.lst
  http-request silent-drop if block_cf_ip or block_xff_ip or block_direct_ip

  redirect scheme https code 301 if !{ ssl_fc }

  default_backend default_backend

frontend https
  bind :443 ssl crt /etc/haproxy/certs/ alpn h2,http/1.1

  http-request set-var(txn.req_hdrs) req.hdrs
  log-format "${HAPROXY_HTTP_LOG_FMT} hdrs:%{+Q}[var(txn.req_hdrs)]"

  acl my_block_cf_ip hdr_ip(cf-connecting-ip) -f /etc/haproxy/blocked_subnets.lst
  acl my_block_xff_ip hdr_ip(x-forwarded-for) -f /etc/haproxy/blocked_subnets.lst
  acl my_block_direct_ip src -f /etc/haproxy/blocked_subnets.lst
  http-request silent-drop if my_block_cf_ip or my_block_xff_ip or my_block_direct_ip

  acl block_cf_ip hdr_ip(cf-connecting-ip) -f /etc/haproxy/bad_reputation_ips.lst
  acl block_xff_ip hdr_ip(x-forwarded-for) -f /etc/haproxy/bad_reputation_ips.lst
  acl block_direct_ip src -f /etc/haproxy/bad_reputation_ips.lst
  http-request silent-drop if block_cf_ip or block_xff_ip or block_direct_ip

  acl shady_user_agent hdr_sub(User-Agent) -i -f /etc/haproxy/shady_user_agents.lst
  http-request silent-drop if shady_user_agent

  filter cache hacache
  http-request cache-use hacache
  http-response cache-store hacache

  stick-table type ip size 1m expire 24d store http_req_rate(300s)
  http-request track-sc0 src
  http-request deny deny_status 429 if { sc_http_req_rate(0) gt 100 }

  acl newsletter hdr(host) -i newsletter.developer-friendly.blog
  use_backend k8s if newsletter

  acl alertmanager hdr(host) -i alertmanager.developer-friendly.blog
  use_backend k8s if alertmanager

  acl auth hdr(host) -i auth.developer-friendly.blog
  acl auth_server hdr(host) -i auth-server.developer-friendly.blog
  use_backend k8s if auth || auth_server

  default_backend default_backend

backend k8s
  option httpchk GET / HTTP/1.1
  http-check send hdr Host newsletter.developer-friendly.blog
  server k8s 127.0.0.1:81 check inter 2000 rise 1 fall 3

backend default_backend
  http-request deny deny_status 404
